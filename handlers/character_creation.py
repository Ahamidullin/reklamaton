from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete
from models.base import async_session
from models.user import User
from models.character import Character
from models.active_character import ActiveCharacter
from fsm.character_creation import CharacterCreation
from keyboards.inline import (
    creation_method_keyboard, skip_keyboard, preview_keyboard,
    archetype_group_keyboard, archetype_type_keyboard, communication_style_keyboard,
    traits_keyboard, edit_options_keyboard, confirm_archetype_keyboard, prompt_back_keyboard
)
from utils.ai import generate_image_with_deepinfra, upload_to_telegraph

router = Router()

@router.callback_query(lambda c: c.data == "create_character")
async def create_character_callback(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(CharacterCreation.choosing_creation_method)
    await callback_query.message.edit_text(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?",
        reply_markup=creation_method_keyboard()
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "creation_prompt", CharacterCreation.choosing_creation_method)
async def creation_prompt_callback(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(CharacterCreation.prompt_based_description)
    await callback_query.message.edit_text(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ö–∞–∫–æ–π —É –Ω–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –∫–∞–∫ –æ–Ω –æ–±—â–∞–µ—Ç—Å—è, —á—Ç–æ –ª—é–±–∏—Ç –∏ –Ω–µ–Ω–∞–≤–∏–¥–∏—Ç?",
        reply_markup=prompt_back_keyboard()
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "back_to_creation_method", CharacterCreation.prompt_based_description)
async def back_to_creation_method_callback(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(CharacterCreation.choosing_creation_method)
    await callback_query.message.edit_text(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?",
        reply_markup=creation_method_keyboard()
    )
    await callback_query.answer()

@router.message(CharacterCreation.prompt_based_description)
async def prompt_based_description_handler(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(CharacterCreation.prompt_based_name)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")

@router.message(CharacterCreation.prompt_based_name)
async def prompt_based_name_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(CharacterCreation.prompt_based_avatar)
    await message.answer(
        "–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ! –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –Ω–µ–≥–æ –≤–Ω–µ—à–Ω–æ—Å—Ç—å? –ï—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
        "–ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=skip_keyboard("skip_avatar_creation")
    )

@router.message(CharacterCreation.prompt_based_avatar)
async def prompt_based_avatar_handler(message: Message, state: FSMContext):
    generating_message = await message.answer("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–Ω–µ—à–Ω–æ—Å—Ç—å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç.")
    image_bytes = await generate_image_with_deepinfra(message.text)
    if image_bytes:
        image_url = await upload_to_telegraph(image_bytes)
        if image_url:
            await state.update_data(avatar_url=image_url, avatar_prompt=message.text)
            await generating_message.edit_text("‚úÖ –í–Ω–µ—à–Ω–æ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
        else:
            await generating_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ.")
    else:
        await generating_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ.")

    await state.set_state(CharacterCreation.preview)
    await show_character_preview(message, state)


@router.callback_query(lambda c: c.data == "skip_avatar_creation", CharacterCreation.prompt_based_avatar)
async def skip_avatar_creation_callback(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(avatar_prompt=None)
    await state.set_state(CharacterCreation.preview)
    await callback_query.message.edit_text("–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å—Ç–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞. "
                                           "–°–µ–π—á–∞—Å —è —Å–æ–±–µ—Ä—É –∫–∞—Ä—Ç–æ—á–∫—É –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
    await callback_query.answer()
    await show_character_preview(callback_query.message, state)


async def show_character_preview(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name")
    description = data.get("description")
    avatar_url = data.get("avatar_url")
    
    type_names_ru = {
        "INTJ": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä", "INTP": "–õ–æ–≥–∏–∫", "ENTJ": "–ö–æ–º–∞–Ω–¥–∏—Ä", "ENTP": "–ü–æ–ª–µ–º–∏—Å—Ç",
        "INFJ": "–ó–∞—Å—Ç—É–ø–Ω–∏–∫", "INFP": "–ü–æ—Å—Ä–µ–¥–Ω–∏–∫", "ENFJ": "–ü—Ä–æ—Ç–∞–≥–æ–Ω–∏—Å—Ç", "ENFP": "–ê–∫—Ç–∏–≤–∏—Å—Ç",
        "ISTJ": "–õ–æ–≥–∏—Å—Ç", "ISFJ": "–ó–∞—â–∏—Ç–Ω–∏–∫", "ESTJ": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "ESFJ": "–ö–æ–Ω—Å—É–ª",
        "ISTP": "–í–∏—Ä—Ç—É–æ–∑", "ISFP": "–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç", "ESTP": "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "ESFP": "–ê—Ä—Ç–∏—Å—Ç"
    }

    # If the description is not directly provided (i.e., constructor-based), generate one.
    if not description:
        archetype_code = data.get("archetype", "–ù–µ —É–∫–∞–∑–∞–Ω")
        archetype_ru = type_names_ru.get(archetype_code, archetype_code)
        comm_style = data.get("communication_style", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        sarcasm = data.get("sarcasm_level", 1)
        humor = data.get("humor_level", 1)
        flirt = data.get("flirt_level", 1)
        unpredictability = data.get("unpredictability_level", 1)
        black_humor = "–î–∞" if data.get("has_black_humor") else "–ù–µ—Ç"

        description = (
            f"<b>–ê—Ä—Ö–µ—Ç–∏–ø:</b> {archetype_ru}\n"
            f"<b>–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:</b> {comm_style}\n"
            f"<b>–°–∞—Ä–∫–∞–∑–º:</b> {sarcasm}/5, <b>–Æ–º–æ—Ä:</b> {humor}/5, <b>–§–ª–∏—Ä—Ç:</b> {flirt}/5\n"
            f"<b>–ë–µ–∑—É–º–∏–µ:</b> {unpredictability}/5, <b>–ß–µ—Ä–Ω—ã–π —é–º–æ—Ä:</b> {black_humor}"
        )

    caption = f"<b>{name}</b>\n\n{description}"

    if avatar_url:
        sent_message = await message.answer_photo(
            photo=avatar_url,
            caption=caption,
            reply_markup=preview_keyboard(),
            parse_mode="HTML"
        )
        # Save the file_id for future use
        await state.update_data(avatar_file_id=sent_message.photo[-1].file_id)
    else:
        await message.answer(
            text=caption,
            reply_markup=preview_keyboard(),
            parse_mode="HTML"
        )

@router.callback_query(lambda c: c.data == "save_character", CharacterCreation.preview)
async def save_character_callback(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    async with async_session() as session:
        # Find or create user
        user_result = await session.execute(select(User).where(User.telegram_id == callback_query.from_user.id))
        user = user_result.scalars().first()
        if not user:
            user = User(telegram_id=callback_query.from_user.id)
            session.add(user)
            await session.commit()
            await session.refresh(user)

        # Create character
        new_character = Character(
            name=data.get("name"),
            description=data.get("description"), # For prompt-based
            avatar_file_id=data.get("avatar_file_id"), # Use file_id now
            user_id=user.id,
            archetype=data.get("archetype"),
            communication_style=data.get("communication_style"),
            sarcasm_level=data.get("sarcasm_level"),
            humor_level=data.get("humor_level"),
            flirt_level=data.get("flirt_level"),
            unpredictability_level=data.get("unpredictability_level"),
            has_black_humor=data.get("has_black_humor")
        )
        session.add(new_character)
        await session.commit()
        await session.refresh(new_character)

        # Set this character as active
        await session.execute(delete(ActiveCharacter).where(ActiveCharacter.user_id == user.id))
        new_active_character = ActiveCharacter(user_id=user.id, character_id=new_character.id)
        session.add(new_active_character)
        await session.commit()
    
    await state.clear()
    await callback_query.message.edit_text(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {new_character.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é! "
                                           "–í—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã –µ–º—É.")
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "edit_character", CharacterCreation.preview)
async def edit_character_callback(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # Check if it was a prompt-based creation
    if "description" in data:
        await state.set_state(CharacterCreation.prompt_based_description)
        await callback_query.message.edit_text(
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        )
    else: # It was a constructor-based creation
        await state.set_state(CharacterCreation.constructor_based_archetype_group)
        await callback_query.message.edit_text(
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤:",
            reply_markup=archetype_group_keyboard()
        )
    await callback_query.answer()

@router.callback_query(
    lambda c: c.data == "creation_constructor",
    CharacterCreation.choosing_creation_method
)
async def creation_constructor_callback(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(CharacterCreation.constructor_based_archetype_group)
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤:",
        reply_markup=archetype_group_keyboard()
    )
    await callback_query.answer()

@router.callback_query(F.data.startswith("archetype_group_"), CharacterCreation.constructor_based_archetype_group)
async def archetype_group_callback(callback_query: CallbackQuery, state: FSMContext):
    group = callback_query.data.split("_")[-1]
    await state.update_data(archetype_group=group)
    await state.set_state(CharacterCreation.constructor_based_archetype_type)

    group_descriptions = {
        "analysts": "<b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∏</b>\n\n–ë–æ–≥–∞—Ç—ã–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –º—ã—Å–ª–∏—Ç–µ–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–ª–∞–Ω –Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∂–∏–∑–Ω–∏.",
        "diplomats": "<b>–î–∏–ø–ª–æ–º–∞—Ç—ã</b>\n\n–•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–µ –∏ –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–µ –ª–∏–¥–µ—Ä—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –æ—á–∞—Ä–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π.",
        "sentinels": "<b>–°—Ç—Ä–∞–∂–∏</b>\n\n–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ –æ–ø–∏—Ä–∞—é—â–∏–µ—Å—è –Ω–∞ —Ñ–∞–∫—Ç—ã –ª—é–¥–∏, —á—å—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–∞.",
        "explorers": "<b>–ò—Å–∫–∞—Ç–µ–ª–∏</b>\n\n–•—Ä–∞–±—Ä—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä—ã, –º–∞—Å—Ç–µ—Ä–∞ –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
    }

    archetype_types = {
        "analysts": ["INTJ", "INTP", "ENTJ", "ENTP"],
        "diplomats": ["INFJ", "INFP", "ENFJ", "ENFP"],
        "sentinels": ["ISTJ", "ISFJ", "ESTJ", "ESFJ"],
        "explorers": ["ISTP", "ISFP", "ESTP", "ESFP"]
    }

    await callback_query.message.edit_text(
        f"{group_descriptions.get(group, '')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø:",
        reply_markup=archetype_type_keyboard(archetype_types[group]),
        parse_mode="HTML"
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "back_to_archetype_group", CharacterCreation.constructor_based_archetype_type)
async def back_to_archetype_group_callback(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(CharacterCreation.constructor_based_archetype_group)
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤:",
        reply_markup=archetype_group_keyboard()
    )
    await callback_query.answer()


@router.callback_query(F.data.startswith("archetype_type_"), CharacterCreation.constructor_based_archetype_type)
async def archetype_type_callback(callback_query: CallbackQuery, state: FSMContext):
    archetype = callback_query.data.split("_")[-1]
    await state.update_data(archetype_to_confirm=archetype) # Store for confirmation

    type_descriptions = {
        "INTJ": "<b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä (INTJ)</b>\n\n–ë–æ–≥–∞—Ç—ã–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –º—ã—Å–ª–∏—Ç–µ–ª–∏, —Å –ø–ª–∞–Ω–æ–º –Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∂–∏–∑–Ω–∏.",
        "INTP": "<b>–õ–æ–≥–∏–∫ (INTP)</b>\n\n–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª–∏ —Å –Ω–µ—É—Ç–æ–ª–∏–º–æ–π –∂–∞–∂–¥–æ–π –∑–Ω–∞–Ω–∏–π.",
        "ENTJ": "<b>–ö–æ–º–∞–Ω–¥–∏—Ä (ENTJ)</b>\n\n–•—Ä–∞–±—Ä—ã–µ, –Ω–∞—Ö–æ–¥—á–∏–≤—ã–µ –∏ —Å–∏–ª—å–Ω—ã–µ –¥—É—Ö–æ–º –ª–∏–¥–µ—Ä—ã, –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥—è—â–∏–µ –ø—É—Ç—å ‚Äì –∏–ª–∏ –ø—Ä–æ–±–∏–≤–∞—é—â–∏–µ –µ–≥–æ.",
        "ENTP": "<b>–ü–æ–ª–µ–º–∏—Å—Ç (ENTP)</b>\n\n–£–º–Ω—ã–µ –∏ –ª—é–±–æ–ø—ã—Ç–Ω—ã–µ –º—ã—Å–ª–∏—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–∫–∞–∂—É—Ç—Å—è –æ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.",
        "INFJ": "<b>–ó–∞—Å—Ç—É–ø–Ω–∏–∫ (INFJ)</b>\n\n–¢–∏—Ö–∏–µ –∏ –º–∏—Å—Ç–∏—á–Ω—ã–µ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–µ –∏ –Ω–µ—É—Å—Ç–∞–Ω–Ω—ã–µ –∏–¥–µ–∞–ª–∏—Å—Ç—ã.",
        "INFP": "<b>–ü–æ—Å—Ä–µ–¥–Ω–∏–∫ (INFP)</b>\n\n–ü–æ—ç—Ç–∏—á–Ω—ã–µ, –¥–æ–±—Ä—ã–µ –∏ –∞–ª—å—Ç—Ä—É–∏—Å—Ç–∏—á–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã–µ –ø–æ–º–æ—á—å –≤ –±–ª–∞–≥–æ–º –¥–µ–ª–µ.",
        "ENFJ": "<b>–ü—Ä–æ—Ç–∞–≥–æ–Ω–∏—Å—Ç (ENFJ)</b>\n\n–•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–µ –∏ –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–µ –ª–∏–¥–µ—Ä—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –æ—á–∞—Ä–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π.",
        "ENFP": "<b>–ê–∫—Ç–∏–≤–∏—Å—Ç (ENFP)</b>\n\n–≠–Ω—Ç—É–∑–∏–∞—Å—Ç—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —É–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥—è—Ç –ø–æ–≤–æ–¥ –¥–ª—è —É–ª—ã–±–∫–∏.",
        "ISTJ": "<b>–õ–æ–≥–∏—Å—Ç (ISTJ)</b>\n\n–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ –æ–ø–∏—Ä–∞—é—â–∏–µ—Å—è –Ω–∞ —Ñ–∞–∫—Ç—ã –ª—é–¥–∏, —á—å—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–∞.",
        "ISFJ": "<b>–ó–∞—â–∏—Ç–Ω–∏–∫ (ISFJ)</b>\n\n–û—á–µ–Ω—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –¥–æ–±—Ä—ã–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∏, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã–µ –≤—Å—Ç–∞—Ç—å –Ω–∞ –∑–∞—â–∏—Ç—É —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö.",
        "ESTJ": "<b>–ú–µ–Ω–µ–¥–∂–µ—Ä (ESTJ)</b>\n\n–û—Ç–ª–∏—á–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –Ω–µ–ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –ª—é–¥—å–º–∏.",
        "ESFJ": "<b>–ö–æ–Ω—Å—É–ª (ESFJ)</b>\n\n–ù–µ–æ–±—ã—á–∞–π–Ω–æ –∑–∞–±–æ—Ç–ª–∏–≤—ã–µ, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ª—é–¥–∏, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã–µ –ø–æ–º–æ—á—å.",
        "ISTP": "<b>–í–∏—Ä—Ç—É–æ–∑ (ISTP)</b>\n\n–•—Ä–∞–±—Ä—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä—ã, –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –≤—Å–µ —Ä—É–∫–∏.",
        "ISFP": "<b>–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç (ISFP)</b>\n\n–ì–∏–±–∫–∏–µ –∏ –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä—Ç–∏—Å—Ç—ã, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏ –∏—Å–ø—ã—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ.",
        "ESTP": "<b>–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å (ESTP)</b>\n\n–£–º–Ω—ã–µ, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–µ –∏ –æ—á–µ–Ω—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–µ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å–ª–∞–∂–¥–∞—é—Ç—Å—è –∂–∏–∑–Ω—å—é –Ω–∞ –≥—Ä–∞–Ω–∏.",
        "ESFP": "<b>–ê—Ä—Ç–∏—Å—Ç (ESFP)</b>\n\n–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–µ –∏ –ø–æ–ª–Ω—ã–µ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞ –ª—é–¥–∏ ‚Äì –∂–∏–∑–Ω—å —Ä—è–¥–æ–º —Å –Ω–∏–º–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–≤–∞–µ—Ç —Å–∫—É—á–Ω–æ–π."
    }

    await callback_query.message.edit_text(
        type_descriptions.get(archetype, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."),
        reply_markup=confirm_archetype_keyboard(archetype),
        parse_mode="HTML"
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "back_to_archetype_types", CharacterCreation.constructor_based_archetype_type)
async def back_to_archetype_types_callback(callback_query: CallbackQuery, state: FSMContext):
    # This handler is implicitly called when the state is right.
    # We just need to call the group selection handler to show the previous step.
    # To do that, we need the group name from the state.
    data = await state.get_data()
    group = data.get("archetype_group")
    
    if group:
        # Re-create the keyboard and message for the archetype type selection
        archetype_types = {
            "analysts": ["INTJ", "INTP", "ENTJ", "ENTP"],
            "diplomats": ["INFJ", "INFP", "ENFJ", "ENFP"],
            "sentinels": ["ISTJ", "ISFJ", "ESTJ", "ESFJ"],
            "explorers": ["ISTP", "ISFP", "ESTP", "ESFP"]
        }
        group_descriptions = {
            "analysts": "<b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∏</b>\n\n–ë–æ–≥–∞—Ç—ã–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –º—ã—Å–ª–∏—Ç–µ–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–ª–∞–Ω –Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∂–∏–∑–Ω–∏.",
            "diplomats": "<b>–î–∏–ø–ª–æ–º–∞—Ç—ã</b>\n\n–•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–µ –∏ –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–µ –ª–∏–¥–µ—Ä—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –æ—á–∞—Ä–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π.",
            "sentinels": "<b>–°—Ç—Ä–∞–∂–∏</b>\n\n–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ –æ–ø–∏—Ä–∞—é—â–∏–µ—Å—è –Ω–∞ —Ñ–∞–∫—Ç—ã –ª—é–¥–∏, —á—å—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–∞.",
            "explorers": "<b>–ò—Å–∫–∞—Ç–µ–ª–∏</b>\n\n–•—Ä–∞–±—Ä—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä—ã, –º–∞—Å—Ç–µ—Ä–∞ –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
        }
        
        await callback_query.message.edit_text(
            f"{group_descriptions.get(group, '')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø:",
            reply_markup=archetype_type_keyboard(archetype_types.get(group, [])),
            parse_mode="HTML"
        )
    else:
        # Fallback in case state is messed up
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.", reply_markup=creation_method_keyboard())
        await state.set_state(CharacterCreation.choosing_creation_method)
    
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "back_to_archetype_confirmation", CharacterCreation.constructor_based_communication_style)
async def back_to_archetype_confirmation_callback(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    archetype = data.get("archetype_to_confirm")
    if archetype:
        await state.set_state(CharacterCreation.constructor_based_archetype_type)
        type_descriptions = {
            "INTJ": "<b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä (INTJ)</b>\n\n–ë–æ–≥–∞—Ç—ã–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –º—ã—Å–ª–∏—Ç–µ–ª–∏, —Å –ø–ª–∞–Ω–æ–º –Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∂–∏–∑–Ω–∏.",
            "INTP": "<b>–õ–æ–≥–∏–∫ (INTP)</b>\n\n–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª–∏ —Å –Ω–µ—É—Ç–æ–ª–∏–º–æ–π –∂–∞–∂–¥–æ–π –∑–Ω–∞–Ω–∏–π.",
            "ENTJ": "<b>–ö–æ–º–∞–Ω–¥–∏—Ä (ENTJ)</b>\n\n–•—Ä–∞–±—Ä—ã–µ, –Ω–∞—Ö–æ–¥—á–∏–≤—ã–µ –∏ —Å–∏–ª—å–Ω—ã–µ –¥—É—Ö–æ–º –ª–∏–¥–µ—Ä—ã, –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥—è—â–∏–µ –ø—É—Ç—å ‚Äì –∏–ª–∏ –ø—Ä–æ–±–∏–≤–∞—é—â–∏–µ –µ–≥–æ.",
            "ENTP": "<b>–ü–æ–ª–µ–º–∏—Å—Ç (ENTP)</b>\n\n–£–º–Ω—ã–µ –∏ –ª—é–±–æ–ø—ã—Ç–Ω—ã–µ –º—ã—Å–ª–∏—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–∫–∞–∂—É—Ç—Å—è –æ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.",
            "INFJ": "<b>–ó–∞—Å—Ç—É–ø–Ω–∏–∫ (INFJ)</b>\n\n–¢–∏—Ö–∏–µ –∏ –º–∏—Å—Ç–∏—á–Ω—ã–µ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–µ –∏ –Ω–µ—É—Å—Ç–∞–Ω–Ω—ã–µ –∏–¥–µ–∞–ª–∏—Å—Ç—ã.",
            "INFP": "<b>–ü–æ—Å—Ä–µ–¥–Ω–∏–∫ (INFP)</b>\n\n–ü–æ—ç—Ç–∏—á–Ω—ã–µ, –¥–æ–±—Ä—ã–µ –∏ –∞–ª—å—Ç—Ä—É–∏—Å—Ç–∏—á–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã–µ –ø–æ–º–æ—á—å –≤ –±–ª–∞–≥–æ–º –¥–µ–ª–µ.",
            "ENFJ": "<b>–ü—Ä–æ—Ç–∞–≥–æ–Ω–∏—Å—Ç (ENFJ)</b>\n\n–•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–µ –∏ –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–µ –ª–∏–¥–µ—Ä—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –æ—á–∞—Ä–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π.",
            "ENFP": "<b>–ê–∫—Ç–∏–≤–∏—Å—Ç (ENFP)</b>\n\n–≠–Ω—Ç—É–∑–∏–∞—Å—Ç—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —É–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥—è—Ç –ø–æ–≤–æ–¥ –¥–ª—è —É–ª—ã–±–∫–∏.",
            "ISTJ": "<b>–õ–æ–≥–∏—Å—Ç (ISTJ)</b>\n\n–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ –æ–ø–∏—Ä–∞—é—â–∏–µ—Å—è –Ω–∞ —Ñ–∞–∫—Ç—ã –ª—é–¥–∏, —á—å—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–∞.",
            "ISFJ": "<b>–ó–∞—â–∏—Ç–Ω–∏–∫ (ISFJ)</b>\n\n–û—á–µ–Ω—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –¥–æ–±—Ä—ã–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∏, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã–µ –≤—Å—Ç–∞—Ç—å –Ω–∞ –∑–∞—â–∏—Ç—É —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö.",
            "ESTJ": "<b>–ú–µ–Ω–µ–¥–∂–µ—Ä (ESTJ)</b>\n\n–û—Ç–ª–∏—á–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –Ω–µ–ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –ª—é–¥—å–º–∏.",
            "ESFJ": "<b>–ö–æ–Ω—Å—É–ª (ESFJ)</b>\n\n–ù–µ–æ–±—ã—á–∞–π–Ω–æ –∑–∞–±–æ—Ç–ª–∏–≤—ã–µ, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ª—é–¥–∏, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã–µ –ø–æ–º–æ—á—å.",
            "ISTP": "<b>–í–∏—Ä—Ç—É–æ–∑ (ISTP)</b>\n\n–•—Ä–∞–±—Ä—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä—ã, –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –≤—Å–µ —Ä—É–∫–∏.",
            "ISFP": "<b>–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç (ISFP)</b>\n\n–ì–∏–±–∫–∏–µ –∏ –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä—Ç–∏—Å—Ç—ã, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏ –∏—Å–ø—ã—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ.",
            "ESTP": "<b>–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å (ESTP)</b>\n\n–£–º–Ω—ã–µ, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–µ –∏ –æ—á–µ–Ω—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–µ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å–ª–∞–∂–¥–∞—é—Ç—Å—è –∂–∏–∑–Ω—å—é –Ω–∞ –≥—Ä–∞–Ω–∏.",
            "ESFP": "<b>–ê—Ä—Ç–∏—Å—Ç (ESFP)</b>\n\n–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–µ –∏ –ø–æ–ª–Ω—ã–µ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞ –ª—é–¥–∏ ‚Äì –∂–∏–∑–Ω—å —Ä—è–¥–æ–º —Å –Ω–∏–º–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–≤–∞–µ—Ç —Å–∫—É—á–Ω–æ–π."
        }
        await callback_query.message.edit_text(
            type_descriptions.get(archetype, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."),
            reply_markup=confirm_archetype_keyboard(archetype),
            parse_mode="HTML"
        )
    else:
        # Fallback
        await state.set_state(CharacterCreation.constructor_based_archetype_group)
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –≥—Ä—É–ø–ø—É –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=archetype_group_keyboard()
        )
    await callback_query.answer()


@router.callback_query(F.data.startswith("confirm_archetype_"), CharacterCreation.constructor_based_archetype_type)
async def confirm_archetype_callback(callback_query: CallbackQuery, state: FSMContext):
    archetype = callback_query.data.split("_")[-1]
    await state.update_data(archetype=archetype)
    await state.set_state(CharacterCreation.constructor_based_communication_style)

    await callback_query.message.edit_text(
        "–ê—Ä—Ö–µ—Ç–∏–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:",
        reply_markup=communication_style_keyboard()
    )
    await callback_query.answer()


@router.callback_query(F.data.startswith("comm_style_"), CharacterCreation.constructor_based_communication_style)
async def communication_style_callback(callback_query: CallbackQuery, state: FSMContext):
    style = callback_query.data.split("_")[-1]
    await state.update_data(communication_style=style)
    await state.set_state(CharacterCreation.constructor_based_traits)
    
    # Initialize traits with default values
    await state.update_data(
        sarcasm_level=1,
        humor_level=1,
        flirt_level=1,
        unpredictability_level=1,
        has_black_humor=False
    )

    await callback_query.message.edit_text(
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:",
        reply_markup=traits_keyboard()
    )
    await callback_query.answer() 

@router.callback_query(F.data.startswith("trait_"), CharacterCreation.constructor_based_traits)
async def traits_callback(callback_query: CallbackQuery, state: FSMContext):
    action = callback_query.data.split("_")[1]
    
    if action == "continue":
        await state.set_state(CharacterCreation.constructor_based_name)
        await callback_query.message.edit_text("–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        await callback_query.answer()
        return

    data = await state.get_data()
    trait = callback_query.data.split("_")[-1]
    
    if action == "incr":
        key = f"{trait}_level"
        if data[key] < 5:
            data[key] += 1
    elif action == "decr":
        key = f"{trait}_level"
        if data[key] > 1:
            data[key] -= 1
    elif action == "toggle":
        key = "has_black_humor"
        data[key] = not data[key]

    await state.set_data(data)
    
    await callback_query.message.edit_reply_markup(
        reply_markup=traits_keyboard(
            sarcasm=data.get("sarcasm_level", 1),
            humor=data.get("humor_level", 1),
            flirt=data.get("flirt_level", 1),
            unpredictability=data.get("unpredictability_level", 1),
            black_humor=data.get("has_black_humor", False)
        )
    )
    await callback_query.answer() 

@router.message(CharacterCreation.constructor_based_name)
async def constructor_based_name_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(CharacterCreation.constructor_based_avatar)
    await message.answer(
        "–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ! –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –Ω–µ–≥–æ –≤–Ω–µ—à–Ω–æ—Å—Ç—å? –ï—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
        "–ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=skip_keyboard("skip_avatar_creation")
    ) 

@router.message(CharacterCreation.constructor_based_avatar)
async def constructor_based_avatar_handler(message: Message, state: FSMContext):
    generating_message = await message.answer("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–Ω–µ—à–Ω–æ—Å—Ç—å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç.")
    image_bytes = await generate_image_with_deepinfra(message.text)
    if image_bytes:
        image_url = await upload_to_telegraph(image_bytes)
        if image_url:
            await state.update_data(avatar_url=image_url, avatar_prompt=message.text)
            await generating_message.edit_text("‚úÖ –í–Ω–µ—à–Ω–æ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
        else:
            await generating_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ.")
    else:
        await generating_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ.")
    
    await state.set_state(CharacterCreation.preview)
    await show_character_preview(message, state)

@router.callback_query(lambda c: c.data == "skip_avatar_creation", CharacterCreation.constructor_based_avatar)
async def skip_avatar_creation_constructor_callback(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(avatar_prompt=None)
    await state.set_state(CharacterCreation.preview)
    await callback_query.message.edit_text("–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å—Ç–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞. "
                                           "–°–µ–π—á–∞—Å —è —Å–æ–±–µ—Ä—É –∫–∞—Ä—Ç–æ—á–∫—É –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
    await callback_query.answer()
    await show_character_preview(callback_query.message, state) 

@router.callback_query(F.data.startswith("edit_character_"))
async def edit_character_entry_callback(callback_query: CallbackQuery, state: FSMContext):
    character_id = int(callback_query.data.split("_")[-1])
    async with async_session() as session:
        character = await session.get(Character, character_id)

    if not character:
        await callback_query.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    # Load character data into FSM
    await state.set_state(CharacterCreation.editing)
    await state.set_data({
        "character_id": character.id,
        "name": character.name,
        "description": character.description,
        "avatar_file_id": character.avatar_file_id,
        "archetype": character.archetype,
        "communication_style": character.communication_style,
        "sarcasm_level": character.sarcasm_level or 1,
        "humor_level": character.humor_level or 1,
        "flirt_level": character.flirt_level or 1,
        "unpredictability_level": character.unpredictability_level or 1,
        "has_black_humor": character.has_black_humor or False
    })

    await callback_query.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character.name}",
        reply_markup=edit_options_keyboard()
    )
    await callback_query.answer() 

@router.callback_query(F.data.startswith("edit_option_"), CharacterCreation.editing)
async def edit_option_callback(callback_query: CallbackQuery, state: FSMContext):
    option = callback_query.data.split("_")[-1]
    
    if option == "name":
        await state.set_state(CharacterCreation.editing_field)
        await state.update_data(editing_what="name")
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    
    elif option == "avatar":
        await state.set_state(CharacterCreation.editing_field)
        await state.update_data(editing_what="avatar")
        await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        
    elif option == "description":
        data = await state.get_data()
        # If the character has a text description, it's prompt-based
        if data.get("description"):
            await state.set_state(CharacterCreation.prompt_based_description)
            await callback_query.message.edit_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:")
        else: # Otherwise, it's constructor-based, restart that flow
            await state.set_state(CharacterCreation.constructor_based_archetype_group)
            await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤:", reply_markup=archetype_group_keyboard())
            
    await callback_query.answer()

@router.message(CharacterCreation.editing_field)
async def editing_field_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    editing_what = data.get("editing_what")

    if editing_what == "name":
        await state.update_data(name=message.text)
        await message.answer(f"–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {message.text}")

    elif editing_what == "avatar":
        generating_message = await message.answer("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç.")
        image_bytes = await generate_image_with_deepinfra(message.text)
        if image_bytes:
            # Send the photo to get a file_id
            sent_photo = await message.answer_photo(image_bytes)
            await state.update_data(avatar_file_id=sent_photo.photo[-1].file_id)
            await generating_message.edit_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await generating_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    
    await state.set_state(CharacterCreation.editing)
    await message.answer("–ß—Ç–æ –µ—â–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=edit_options_keyboard()) 

@router.callback_query(F.data == "edit_save", CharacterCreation.editing)
async def edit_save_callback(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    character_id = data.get("character_id")

    if not character_id:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.", show_alert=True)
        await state.clear()
        return

    async with async_session() as session:
        character = await session.get(Character, character_id)
        if character:
            character.name = data.get("name")
            character.description = data.get("description")
            character.avatar_file_id = data.get("avatar_file_id")
            character.archetype = data.get("archetype")
            character.communication_style = data.get("communication_style")
            character.sarcasm_level = data.get("sarcasm_level")
            character.humor_level = data.get("humor_level")
            character.flirt_level = data.get("flirt_level")
            character.unpredictability_level = data.get("unpredictability_level")
            character.has_black_humor = data.get("has_black_humor")
            await session.commit()
            await callback_query.message.edit_text(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            await callback_query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

    await state.clear()
    await callback_query.answer() 